<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>fsTimer documentation - Section 4.2: Importing preregistration - details</title>
<meta name="description" content="fsTimer - free, open source software for race timing">
<link rel="stylesheet" type="text/css" href="style_doc.css">
</head>
<body>
<div id="top-box">
<h3><a href="http://fstimer.org/">fsTimer</a> documentation</h3>
</div>

<div id="lower-box">

<b>Section 1</b> <a href="http://fstimer.org/download.htm">Installing fsTimer</a><br>
<b>Section 2</b> <a href="documentation_sec2.htm">Overview</a><br>
<!--
<h5><b>2.1</b> <a href="documentation_sec2_1.htm">Opening and main windows</a><br></h5>
<h5><b>2.2</b> <a href="documentation_sec2_2.htm">Importing preregistration</a><br></h5>
<h5><b>2.3</b> <a href="documentation_sec2_3.htm">Registration</a><br></h5>
<h5><b>2.4</b> <a href="documentation_sec2_4.htm">Compiling registrations</a><br></h5>
<h5><b>2.5</b> <b>Race timing</b><br></h5>
-->
<b>Section 3</b> <a href="documentation_sec3.htm">Checklist for timing with fsTimer</a><br>
<b>Section 4</b> <a href="documentation_sec4.htm">Detailed descriptions of fsTimer components</a><br>
<h5><b>4.1</b> <a href="documentation_sec4_1.htm">Setting up for a new race</a><br></h5>
<h5><b>4.2</b> <b>Importing preregistration - details</b><br></h5>
<h5><b>4.3</b> <a href="documentation_sec4_3.htm">Registration - details</a><br></h5>
<h5><b>4.4</b> <a href="documentation_sec4_4.htm">Compiling registrations - details</a><br></h5>
<h5><b>4.5</b> <a href="documentation_sec4_5.htm">Race timing - details</a><br></h5>
<b>Section 5</b> <a href="documentation_sec5.htm">Additional details for developers</a><br>
</div>

<div id="lower-box">
<h3>Section 4.2 - Importing preregistration - details</h3><br>

The preregistration module allows for a csv file to be imported into an fsTimer registration database. Starting from an Excel or Libreoffice spreadsheet, you can do "Save as" to save it as a csv file.<br><br>

<img width="682" height="399" src="documentation_figs/fstimer_fig4.png"><br><br> <!--853x499-->

See the fstimer_demo_online_registration.csv file that comes in the fstimer_demo project preloaded in fsTimer for an example of how the spreadsheet should be formatted. The first row is a header row, giving the name of each column.<br><br>

After pressing "Open" and selecting a csv file, the field mapping window will open:<br><br>

<img width="482" height="341" src="documentation_figs/fstimer_fig60.png"><br><br> <!--602x426-->

For each registration field (left column), you must specify which CSV column contains data for that field (middle column). CSV fields with names that exactly match registration fields are automatically matched, but can be re-assigned. Clicking on an entry in the middle column will bring up a drop-down list of all of the CSV fields present in the file. If you do not wish to map any of the csv fields to a particular registration field (for instance, maybe you do not have IDs in your csv file) then click on the drop-down menu and select "-- Leave Empty --".<br><br>

For any registration field, you can also specify to use an "-- Advanced expression --", which allows specifying a custom python expression. If you select this option, then you must fill the expression in the right column. Expressions can combine values from several CSV columns using the "reg" variable to refer to columns. This variable is a dictionary whose keys are the CSV column's name, and who's value will be the data value of that column. For example, if there were a registration field "Name" but the CSV contained columns "First Name" and "Last Name", the following expression could be used to map both of those columns to "Name" in the correct way:<br><br>

' '.join([reg['First name'], reg['Last name']]) <br><br>

Any python function of the CSV data can thus be used to populate a registration field. If the expression fails to evaluate, it will be noted on the field mapping window. Also, if a registration field has not either been assigned a CSV field or specified to be left empty, then it will be noted on the field mapping window. Otherwise, when you press "OK" on the field mapping window, it will close and the outcome of the importing will be noted on the preregistration screen:<br><br>

<img width="482" height="341" src="documentation_figs/fstimer_fig5.png"><br><br> <!--602x426-->

"Found csv fields" lists all of the columns found in the csv file (these will be exactly all of the column headers). "Matched csv fields" lists all of the columns from the csv file that were automatically matched with the registration database fields by having identical names. "Did not match csv fields" lists the columns from the csv file that did not have exact matches in the registration database. "Did not find in csv" lists the registration fields that were not automtically matched with CSV columns - these fields were either manually assigned or specified to be left blank. In this case, "ID" is a registration field but was not in the csv (that will be the case if you assign bib IDs when runners pick up their bibs, as we do).<br><br>

If you are importing data into a combobox (recall, this is the type of field that must take one of a few values) then all of the entries in that column in the csv file must match exactly one of the combobox values. For example, the "Gender" registration field is a combobox that takes values "male", "female", or blank. If "Gender" is matched to a column in the csv file, then all of the values in that column must be either "male", "female", or blank. This is case sensitive - "Male" will not match "male". If you try to import a csv file for which the values in a combobox column do not take valid values, you will get an error:<br><br>

<img width="482" height="341" src="documentation_figs/fstimer_fig34.png"><br><br> <!--602x426-->

The error tells you what the invalid value is ("Male" instead of "male", "female", or blank), and where in the csv the error is (row 12). Correct any errors until the csv imports directly. When the csv is successfully imported, it while write the corresponding registration database file to a file named project_name_registration_prereg.json, in the directory fstimer/project_name. The file name is printed in the text field on the pre-registration window. <b>Note</b> that if a file project_name_registration_prereg.json already exists (for instance, because you already imported another csv in this same project), <b>it will be overwritten</b>.<br><br>


Continue on to <a href="documentation_sec4_3.htm">Section 4.3 Registration - details</a>.
</div>

</body></html>