<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>fsTimer documentation - Section 4.2: Importing preregistration - details</title>
<meta name="description" content="fsTimer - free, open source software for race timing">
<link rel="stylesheet" type="text/css" href="style_doc.css">
</head>
<body>
<div id="top-box">
<h3><a href="http://fstimer.org/">fsTimer</a> documentation</h3>
</div>

<div id="lower-box">

<b>Section 1</b> <a href="http://fstimer.org/download.htm">Installing fsTimer</a><br>
<b>Section 2</b> <a href="documentation_sec2.htm">Overview</a><br>
<!--
<h5><b>2.1</b> <a href="documentation_sec2_1.htm">Opening and main windows</a><br></h5>
<h5><b>2.2</b> <a href="documentation_sec2_2.htm">Importing preregistration</a><br></h5>
<h5><b>2.3</b> <a href="documentation_sec2_3.htm">Registration</a><br></h5>
<h5><b>2.4</b> <a href="documentation_sec2_4.htm">Compiling registrations</a><br></h5>
<h5><b>2.5</b> <b>Race timing</b><br></h5>
-->
<b>Section 3</b> <a href="documentation_sec3.htm">Checklist for timing with fsTimer</a><br>
<b>Section 4</b> <a href="documentation_sec4.htm">Detailed descriptions of fsTimer components</a><br>
<h5><b>4.1</b> <a href="documentation_sec4_1.htm">Setting up for a new race</a><br></h5>
<h5><b>4.2</b> <b>Importing preregistration - details</b><br></h5>
<h5><b>4.3</b> <a href="documentation_sec4_3.htm">Registration - details</a><br></h5>
<h5><b>4.4</b> <a href="documentation_sec4_4.htm">Compiling registrations - details</a><br></h5>
<h5><b>4.5</b> <a href="documentation_sec4_5.htm">Race timing - details</a><br></h5>
<b>Section 5</b> <a href="documentation_sec5.htm">Additional details for developers</a><br>
</div>

<div id="lower-box">
<h3>Section 4.2 - Importing preregistration - details</h3><br>

The preregistration module allows for a csv file to be imported into an fsTimer registration database. Starting from an Excel or Libreoffice spreadsheet, you can do "Save as" to save it as a csv file.<br><br>

<img width="682" height="399" src="documentation_figs/fstimer_fig4.png"><br><br> <!--853x499-->

See the fstimer_demo.csv file that comes in the fstimer_demo project preloaded in fsTimer for an example of how the spreadsheet should be formatted. The first row is a header row, giving the name of each column. When importing, fsTimer will look at these column names and will try to match them with the names of the registration database fields that you chose when creating the new project. For instance, if "Last name" was a field defined when creating the project, then it will be matched with the "Last name" column in the spreadsheet. If "Telephone" was not a field defined when creating the project, then the "Telephone" column will not be matched with a registration field, and will be left out. When the csv is loaded, it will tell you which fields were used and which were left out:<br><br>

<img width="482" height="341" src="documentation_figs/fstimer_fig5.png"><br><br> <!--602x426-->

"Found csv fields" lists all of the fields found in the csv file (these will be exactly all of the column headers). "Using csv fields" lists all of the fields from the csv file that were successfully matched with the pre-specified registration database fields. "Ignoring csv fields" lists the fields from the csv file that were <i>not</i> matched with registration database fields. In this case, "Emergency contact number" and "Emergency contact name" were in the csv file but were not specified as registration fields during project creation, and thus they will be ignored. "Did not find" lists the pre-specified registration fields that were not matched with fields from the csv. In this case, "ID" is a registration field but was not in the csv (that will probably generally be the case, as you probably won't assign bib IDs during preregistration).<br><br>

There are two important details for successfully importing a csv file. First, everything is case and space sensitive. If you have "last name" in the csv file but "Last name" as the registration database field, these will not match. Second, if you are importing data into a combobox (recall, this is the type of field that must take one of a few values) then all of the entries in that column in the csv file must match exactly one of the combobox values. For example, the "Gender" registration field is a combobox that takes values "male", "female", or blank. If there is a "Gender" column in the csv file, then all of the values in that column must be either "male", "female", or blank. Again, this is case sensitive - "Male" will not match "male". If you try to import a csv file for which the values in a combobox column do not take valid values, you will get an error:<br><br>

<img width="482" height="341" src="documentation_figs/fstimer_fig34.png"><br><br> <!--602x426-->

The error tells you what the invalid value is ("Male" instead of "male", "female", or blank), and where in the csv the error is (row 8). Correct any errors until the csv imports directly. When the csv is successfully imported, it while write the corresponding registration database file to a file named project_name_registration_prereg.json, in the directory fstimer/project_name. The file name is printed in the text field on the pre-registration window. Note that if a file project_name_registration_prereg.json already exists (for instance, because you already imported another csv in this same project), it will be overwritten.<br><br>


Continue on to <a href="documentation_sec4_3.htm">Section 4.3 Registration - details</a>.
</div>

</body></html>